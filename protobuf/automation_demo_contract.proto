// the version of the language, use proto3 for contracts
syntax = "proto3";

package upkeep;

// some core imports for AElf chain types
import "aelf/core.proto";
import "aelf/options.proto";
import "upkeep_interface.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "AetherLink.Contracts.AutomationDemo";

// the contract definition: a gRPC service definition.
service AutomationDemoContract {
    option (aelf.base) = "upkeep_interface.proto";
    option (aelf.csharp_state) = "AetherLink.Contracts.AutomationDemo.AutomationDemoContractState";
    
    rpc BuyInvestment(BuyInvestmentInput) returns (google.protobuf.Empty) {}
}

message BuyInvestmentInput {
    aelf.Hash investment_name = 1;
    int64 amount = 2;
}

message InvestmentInfo {
    aelf.Hash investment_name = 1;
    aelf.Hash investment_price = 2;
    string reward_currency_name = 3;
    int64 daily_interest_rate = 4;
}

message OrderRecord {
    aelf.Address consumer = 1;
    aelf.Hash investment_name = 2;
    int64 amount = 3;
    google.protobuf.Timestamp created = 4;
}

// logevent
message InvestmentBought {
    option (aelf.is_event) = true;
    aelf.Address consumer = 1;
    aelf.Hash investment_name = 2;
    aelf.Hash investment_price = 3;
    string reward_currency_name = 4;
    int64 amount = 5;
}
message RewardsTransferred {
    option (aelf.is_event) = true;
    aelf.Address beneficiary = 1;
    aelf.Hash investment_name = 2;
    int64 amount = 3;
}


message LogEventCreated {
    option (aelf.is_event) = true;
    aelf.Hash mock_data = 1;
}