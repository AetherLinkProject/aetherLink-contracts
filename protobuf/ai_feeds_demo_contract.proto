// the version of the language, use proto3 for contracts
syntax = "proto3";

package ai;

// some core imports for AElf chain types
import "aelf/core.proto";
import "aelf/options.proto";
import "ai_request_interface.proto";
import "ai_feeds_common_message.proto";

// import for using the google.protobuf.* type.
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "AetherLink.Contracts.AIFeeds.Demo";

service AIFeedsDemoContract {
    option (aelf.base) = "ai_request_interface.proto";
    option (aelf.csharp_state) = "AetherLink.Contracts.AIFeeds.Demo.AIFeedsDemoContractState";
    
    rpc Initialize(InitializeInput) returns (google.protobuf.Empty) {}
    rpc StartAIRequest(StartAIRequestInput) returns (google.protobuf.Empty) {}
    rpc GetAIResult(aelf.Hash) returns (ai.ChatGptResponse) {}    
    
    rpc Adopt(google.protobuf.Empty) returns (google.protobuf.Empty) {}
    rpc GetInscription(aelf.Hash) returns (InscriptionInfo) { option (aelf.is_view) = true; }
}

message InitializeInput {
    aelf.Address admin = 1;
    aelf.Address ai_oracle = 2;
}

message StartAIRequestInput {
    string name = 1;
    bytes description = 2;
}

message AIRequestInfo {
    string name = 1;
    ai.ChatGptResponse result = 2;
}

message AIRequestStarted {
    option (aelf.is_event) = true;
    aelf.Hash trace_id = 1;
    string name = 2;    
}

// logevent
message Adopted {
  option (aelf.is_event) = true;
  aelf.Hash adopt_id = 1;
  aelf.Address adopter = 2;
  Attributes attributes = 3;
  int64 block_height = 4;
}

message Attributes {
  repeated Attribute attribute = 1;
}

message Attribute {
  string trait_type = 1;
  string value = 2;
}

message InscriptionInfo {
  Attributes traits = 1;
  string image = 2;           // base64
  int64 valuation = 3;
}
